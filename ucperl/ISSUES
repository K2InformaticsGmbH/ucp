This file contains important unsolved issues in the UCPERL application
with regard to the UK H3G service.

See also the file ISSUES-SOLVED for solved issues



001: The PID field in the 31 operation message

This field is  in the H3G examples 0539 (PC  via TCP/IP) but according
to the logicaCMG  specification it should be 0639  (PC via abbreviated
number).  I would  say that  the H3G  example is  not a  valid example
according to the specifcation.


003: Type of addresses

An address  is a string of digits.   This might be a  phone number, an
X25  number or  a (coded)  IP address.   What it  is is  either fixed,
determined by  another field  or a matter  of contract/support  by the
SMSC provider. This  is a mess. The library  has hard coded behaviours
here. That may not always be correct and needs to be investigated.

The address  field may also be  alphanumeric.  Then you  can e.g. have
internet address  (e.g. foo@bar.com) there  - hex coded of  course. Is
this supported.

To see  all addresses - look  at the data_template_*  functions in the
ucp_syntax.erl file. The  most complex address is 5x:oadc  - it can be
IP or number or alphanumeric - and it  may be packed in 7 bits - if it
is IP or not  is decided in an extra service (xser)  field.  Here is a
list of the other fields that may be an IP address.

    30:nad, 31:adc, 5x:nadc, 5x:lrad, 6x:oadc, 6x:ladc.

Note that those are all addresses to myself.

The   main  isssue   today  is   that  they   are   not  automatically
encoded/decoded even though it looks so in the interface.


007: The character set used in the transport?

The transport uses IRA - which more or less is ASCII.  Some characters
have special  meaning in the  protocol though, in particular  stx, etx
and  /.   Any more?   This  is  important  e.g.  when  sending  system
messages. It  is also important  for other string based  fields. There
are safety issues and there are also usage issues - e.g.  can you (via
escape) have a / in a system message?


008: Character set in hex coded messages

Hex coded messages may by default contain two different character sets
- GSM 7-bit  and 16-bit  unicode.  An operator  may decide  to support
other  character sets.   Is  this  anything the  library  has to  know
anything about?  Shall the library do character code mappings?


009: Specific NACK

The  specification of  UCP defines  lots of  error  messages regarding
parse  errors  and  other  faults   in  the  messages.   This  is  not
supported. Should it be?  Or shall we assume the SMSC knows what it is
doing?


016: Bad behaviour protection ??

There  is currently  no protection  against the  SMSC sending  lots of
garbage and also takes a very long time from STX to ETX.


025: Only support for login part of message 60 in ucp_session


030: Character set in diverse fields, e.g. OAdC.

Some fields uses GSM7 alphabet (as may also the message, see
ISSUE 008 above). Who is responsible for providing this?

COMMENT: we ignore this problem for now


031: Not all operations are supported

make and parse, i.e. full support: 31, 51, 60
parse: 52, 53, 54, 55, 56, 57, 58, 61
parse, not tested (legacy): 01, 02, 03, 30
not supported at all: none


032: SM field in ACK not fully supported

Sometimes the SM field contains parsable information.

This is e.g. the case for ACK for OT - 01, 02, 03, 30, 51 and 54. Then
the SM field shall contain "AdC:SCTS".  This information is only added
by the SMSC. This is not implemented.

This is also the case for the OT 31 - where the SM field shall contain
the number of outstanding sent messages. This is also generated by the
SMSC. This field is currently set to 0000 - which I think is OK.

COMMENT: only SMSC fills in this info in the SM field.  And in the H3G
UK case we dont need to use it.


034: the year field of time only contains 2 digits

There are only two digits for  year in the messages you get. Therefore
the   time  after  parsing   is  not   compatible  with   Erlang  time
structures. You have  to use some heuristics to  "guess" the first two
digits of the  year. This heuristics COULD be in the  library - but is
that a good solution?


035: Efficient coding of the oadc and all IP address fields?

The coding of the oadc field (in  OT 5x) is inefficient and it is hard
to write an  easy to read and bug free  efficient code.  Adding coding
for all IP addresses is also  inefficient as the UCP structure have to
be searched several times.  All those  fields are also static - and it
would be  a good idea to  compute them once. Therefore  maybe the user
shall provide them coded.


036: How long are the MSG fields?

The split sm function have to know  how large the SM can be. Is it 70,
80, 140  or 160.  Or are  large messages allowed  - and  therefore the
messages should not be splitted?


038: Parsing of outgoing messages?

Currently all outgoing messages (and results) are parsed. This is only
as an  extra service to  the user. A  service that the user  might not
want. This is expensive - and might seem like a bad design choice.
